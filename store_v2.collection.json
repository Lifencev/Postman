{
	"info": {
		"_postman_id": "bf38346d-9602-46b6-83d5-e362171230ec",
		"name": "store",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "27975718"
	},
	"item": [
		{
			"name": "Products",
			"item": [
				{
					"name": "Get a list of products",
					"item": [
						{
							"name": "Get sorted list of products",
							"item": [
								{
									"name": "Get list of products sorted by price ASC",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response time is less than 200ms\", () => {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code is 200\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type is present\", () => {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response contains valid JSON data\", function () {\r",
													"    const schema = pm.collectionVariables.get(\"productsSchema\");\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"let isSortedFunctionString = pm.collectionVariables.get(\"isSortedFunction\");\r",
													"let productsIsSorted = eval(\"(\" + isSortedFunctionString + \")\");\r",
													"let data = pm.response.json();\r",
													"\r",
													"pm.test(\"The data is sorted by price in ascending order\", function () {\r",
													"    pm.expect(productsIsSorted(data, 'price', 'asc')).to.be.true;\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/products?sortOrder=ASC&sortKey=price",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"products"
											],
											"query": [
												{
													"key": "sortOrder",
													"value": "ASC"
												},
												{
													"key": "sortKey",
													"value": "price"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get list of products sorted by price DESC",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response time is less than 200ms\", () => {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code is 200\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type is present\", () => {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response contains valid JSON data\", function () {\r",
													"    const schema = pm.collectionVariables.get(\"productsSchema\");\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"let isSortedFunctionString = pm.collectionVariables.get(\"isSortedFunction\");\r",
													"let productsIsSorted = eval(\"(\" + isSortedFunctionString + \")\");\r",
													"let data = pm.response.json();\r",
													"\r",
													"pm.test(\"The data is sorted by price in descending order\", function () {\r",
													"    pm.expect(productsIsSorted(data, 'price', 'desc')).to.be.true;\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/products?sortOrder=DESC&sortKey=price",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"products"
											],
											"query": [
												{
													"key": "sortOrder",
													"value": "DESC"
												},
												{
													"key": "sortKey",
													"value": "price"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get list of products sorted by name ASC",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response time is less than 200ms\", () => {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code is 200\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type is present\", () => {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response contains valid JSON data\", function () {\r",
													"    const schema = pm.collectionVariables.get(\"productsSchema\");\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"let isSortedFunctionString = pm.collectionVariables.get(\"isSortedFunction\");\r",
													"let productsIsSorted = eval(\"(\" + isSortedFunctionString + \")\");\r",
													"let data = pm.response.json();\r",
													"\r",
													"pm.test(\"The data is sorted by name in ascending order\", function () {\r",
													"    pm.expect(productsIsSorted(data, 'name', 'asc')).to.be.true;\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/products?sortOrder=ASC&sortKey=name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"products"
											],
											"query": [
												{
													"key": "sortOrder",
													"value": "ASC"
												},
												{
													"key": "sortKey",
													"value": "name"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get list of products sorted by name DESC",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response time is less than 200ms\", () => {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code is 200\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type is present\", () => {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response contains valid JSON data\", function () {\r",
													"    const schema = pm.collectionVariables.get(\"productsSchema\");\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"let isSortedFunctionString = pm.collectionVariables.get(\"isSortedFunction\");\r",
													"let productsIsSorted = eval(\"(\" + isSortedFunctionString + \")\");\r",
													"let data = pm.response.json();\r",
													"\r",
													"pm.test(\"The data is sorted by name in descending order\", function () {\r",
													"    pm.expect(productsIsSorted(data, 'name', 'desc')).to.be.true;\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/products?sortOrder=DESC&sortKey=name",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"products"
											],
											"query": [
												{
													"key": "sortOrder",
													"value": "DESC"
												},
												{
													"key": "sortKey",
													"value": "name"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Get list of products using pagination",
							"item": [
								{
									"name": "List of products on the one page",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than 200ms\", () => {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type is present\", () => {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response contains valid JSON data\", function () {\r",
													"    const schema = pm.collectionVariables.get(\"productsSchema\");\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"const response = pm.response.json();\r",
													"let pageSize = parseInt(pm.request.url.query.get(\"pageSize\"));\r",
													"\r",
													"pm.test(\"Correct number of items returned\", function () {\r",
													"    let dataLength = response.length;\r",
													"    pm.expect(dataLength).to.be.at.most(pageSize);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/products?page={{pageNumber}}&pageSize={{pageSize}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"products"
											],
											"query": [
												{
													"key": "page",
													"value": "{{pageNumber}}"
												},
												{
													"key": "pageSize",
													"value": "{{pageSize}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "List of products on the non-existent page",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than 200ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type is present\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"});\r",
													"\r",
													"const response = pm.response.json();\r",
													"\r",
													"pm.test(\"Empty array is shown\", function () {\r",
													"    let dataLength = response.length;\r",
													"    pm.expect(dataLength).to.be.eql(0);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/products?page={{nonExistentPage}}&pageSize={{pageSize}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"products"
											],
											"query": [
												{
													"key": "page",
													"value": "{{nonExistentPage}}"
												},
												{
													"key": "pageSize",
													"value": "{{pageSize}}"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "List of products",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than 200ms\", () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", () => {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains valid JSON data\", function () {\r",
											"    const schema = pm.collectionVariables.get(\"productsSchema\");\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/products",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"products"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get a product",
					"item": [
						{
							"name": "Get product by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", () => {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains valid JSON data\", function () {\r",
											"    const schema = pm.collectionVariables.get(\"productSchema\");\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"const response = pm.response.json()\r",
											"\r",
											"pm.test(\"Response contains valid price and name\", function () {\r",
											"    pm.expect(response.price).to.be.above(0);\r",
											"    pm.expect(response.name).to.not.eql(\"\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/products/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"products",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{productId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get product by incorrect ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/products/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"products",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{incorrectProductId}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Create a product",
					"item": [
						{
							"name": "Create product",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", () => {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains valid JSON data\", function () {\r",
											"    const schema = pm.collectionVariables.get(\"productSchema\");\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Response contains valid price and name\", function () {\r",
											"    pm.expect(response.price).to.be.above(0);\r",
											"    pm.expect(response.name).to.not.eql(\"\");\r",
											"});\r",
											"\r",
											"pm.collectionVariables.set(\"productId\", response.id);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{$randomProduct}}\",\r\n    \"price\": {{$randomPrice}},\r\n    \"sku\": 123321123,\r\n    \"description\": \"{{$randomWords}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/products",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"products"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create product with negative price",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let randomNegativePrice = -(Math.floor(Math.random() * 100) + 1);\r",
											"\r",
											"pm.collectionVariables.set(\"randomNegativePrice\", randomNegativePrice);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{$randomProduct}}\",\r\n    \"price\": {{randomNegativePrice}},\r\n    \"sku\": 123321123,\r\n    \"description\": \"{{$randomWords}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/products",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"products"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create product with empty name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let randomNegativePrice = -(Math.floor(Math.random() * 100) + 1);\r",
											"\r",
											"pm.collectionVariables.set(\"randomNegativePrice\", randomNegativePrice);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"\",\r\n    \"price\": {{$randomPrice}},\r\n    \"sku\": 123321123,\r\n    \"description\": \"{{$randomWords}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/products",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"products"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Update a product",
					"item": [
						{
							"name": "Update product",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", () => {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains valid JSON data\", function () {\r",
											"    const schema = pm.collectionVariables.get(\"productSchema\");\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"\r",
											"pm.test(\"Response contains valid price and name\", function () {\r",
											"    pm.expect(response.price).to.be.above(0);\r",
											"    pm.expect(response.name).to.not.eql(\"\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": {{productId}},\r\n    \"name\": \"{{$randomProduct}}\",\r\n    \"price\": {{$randomPrice}},\r\n    \"sku\": 123321123,\r\n    \"description\": \"{{$randomWords}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/products",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"products"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update non-existent product",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": {{nonExistentProductId}},\r\n    \"name\": \"{{$randomProduct}}\",\r\n    \"price\": {{$randomPrice}},\r\n    \"sku\": 123321123,\r\n    \"description\": \"{{$randomWords}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/products",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"products"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Remove a product",
					"item": [
						{
							"name": "Remove product by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Type is present\", () => {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains valid JSON data\", function () {\r",
											"    const schema = pm.collectionVariables.get(\"productSchema\");\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/products/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"products",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{productId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Remove product by non-existent ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/products/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"products",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{nonExistentProductId}}"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							"const productsSchema = {\r",
							"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
							"  \"type\": \"array\",\r",
							"  \"items\": [\r",
							"    {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"id\": {\r",
							"          \"type\": \"integer\"\r",
							"        },\r",
							"        \"name\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"price\": {\r",
							"          \"type\": \"number\"\r",
							"        },\r",
							"        \"sku\": {\r",
							"          \"type\": \"integer\"\r",
							"        },\r",
							"        \"description\": {\r",
							"          \"type\": \"string\"\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"id\",\r",
							"        \"name\",\r",
							"        \"price\",\r",
							"        \"sku\",\r",
							"        \"description\"\r",
							"      ]\r",
							"    }\r",
							"  ]\r",
							"} \r",
							"\r",
							"const productSchema = {\r",
							"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"id\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"price\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"sku\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"description\": {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"id\",\r",
							"    \"name\",\r",
							"    \"price\",\r",
							"    \"sku\",\r",
							"    \"description\"\r",
							"  ]\r",
							"}\r",
							"\r",
							"pm.collectionVariables.set(\"productsSchema\", productsSchema);\r",
							"pm.collectionVariables.set(\"productSchema\", productSchema);"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Orders",
			"item": [
				{
					"name": "List of orders",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/orders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get order by ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/orders/3",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders",
								"3"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create order",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"order5\",\r\n    \"sku\": 123425445656765\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/orders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update order",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": 4,\r\n    \"name\": \"order5\",\r\n    \"sku\": 123425445656765\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/orders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove order by ID",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/orders/4",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders",
								"4"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Users",
			"item": [
				{
					"name": "List of users",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get user by ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/3",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"3"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create user",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"Dream\",\r\n    \"lastName\": \"Real\",\r\n    \"email\": \"dream.real@gmail.com\",\r\n    \"dateOfBirth\": \"2001-10-99\",\r\n    \"emailVerified\": true,\r\n    \"signUpDate\": \"2019-08-24\",\r\n    \"status\": \"active\",\r\n    \"level\": \"lord\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update user",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"Ilon\",\r\n    \"lastName\": \"Mask\",\r\n    \"email\": \"ilon.mask@gmail.com\",\r\n    \"dateOfBirth\": \"2001-10-99\",\r\n    \"emailVerified\": true,\r\n    \"signUpDate\": \"2019-08-24\",\r\n    \"status\": \"active\",\r\n    \"level\": \"lord\",\r\n    \"id\": 10\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove user by ID",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/10",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"10"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"function isSorted(array, field, order) {\r",
					"    for (let i = 0; i < array.length - 1; i++) {\r",
					"        if (order === 'asc' && array[i][field] > array[i + 1][field]) {\r",
					"            return false;\r",
					"        }\r",
					"        if (order === 'desc' && array[i][field] < array[i + 1][field]) {\r",
					"            return false;\r",
					"        }\r",
					"    }\r",
					"    return true;\r",
					"}\r",
					"\r",
					"pm.collectionVariables.set(\"isSortedFunction\", isSorted.toString());"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:3000",
			"type": "string"
		},
		{
			"key": "isSortedFunction",
			"value": "function isSorted(array, field, order) {\n    for (let i = 0; i < array.length - 1; i++) {\n        if (order === 'asc' && array[i][field] > array[i + 1][field]) {\n            return false;\n        }\n        if (order === 'desc' && array[i][field] < array[i + 1][field]) {\n            return false;\n        }\n    }\n    return true;\n}"
		},
		{
			"key": "productsSchema",
			"value": "[object Object]"
		},
		{
			"key": "productId",
			"value": "1"
		},
		{
			"key": "productSchema",
			"value": "[object Object]"
		},
		{
			"key": "randomNegativePrice",
			"value": "-10"
		},
		{
			"key": "incorrectProductId",
			"value": "0"
		},
		{
			"key": "nonExistentProductId",
			"value": "0"
		},
		{
			"key": "pageNumber",
			"value": "2"
		},
		{
			"key": "pageSize",
			"value": "2"
		},
		{
			"key": "nonExistentPage",
			"value": "-2"
		}
	]
}